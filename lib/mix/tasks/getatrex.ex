defmodule Mix.Tasks.Getatrex do
  @moduledoc """
  Runs locale translation routine
  """
  use Mix.Task

  @shortdoc "Translates gettext locale with Google Cloud Translate API"

  @doc """
  Runs the routine

  1. Check whether target locale exists, files errors.po, default.po
  2. Start reading `default.po` in the stream
  3. Collect translation groups by comments(location in templates) + msgid line(original) + msgstr line(translated)
  4. When translation group is collected - translate and save to msgstr line
  5. When translation is done - write group to disk
  6. When translation failed - write not translated group to disk (to re-run this later)
  7. All read/write are sync (to respect the order)
  8.
  """
  def run([to_lang | _tail]) do
    Mix.shell.info "Starting..."

    to_lang
    |> translated_locale_path_default_po()
    |> Getatrex.Writer.start_link()

    Getatrex.Collector.start_link()

    to_lang
    |> locale_path_default_po()
    |> File.stream!()
    |> Stream.map(&String.trim/1)
    |> Stream.with_index()
    |> Stream.map(fn {line, i} ->
      IO.puts "#{i}: #{line}"
      Getatrex.Collector.dispatch_line(line)
    end)
    |> Stream.run()

    Getatrex.Collector.dispatch_line("")

    Mix.shell.info "Done!"
  end

  def run(_), do: run()

  def run do
    Mix.shell.info "Call this task in the following way:"
    Mix.shell.info ""
    Mix.shell.info "\t$ mix getatrex es"
    Mix.shell.info ""
    Mix.shell.info "where `es` - target language (should be created by gettext before getatrex)"
    Mix.shell.info ""
    Mix.shell.info "Please read README.md https://github.com/alexfilatov/getatrex#getting-started"
  end

  @doc """
  Returns path to the locale generated by gettext
  """
  def locale_path_default_po(to_lang) do
    "./priv/gettext/#{to_lang}/LC_MESSAGES/default.po"
  end

  @doc """
  Returns path for translated locale
  """
  def translated_locale_path_default_po(to_lang) do
    "./priv/gettext/#{to_lang}/LC_MESSAGES/translated_default.po"
  end

end
